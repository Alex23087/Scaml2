let _ = print 42

let x = 1 + 1

let _ = print x

let _ =
  print "hello,";
  print "world!"

let public tainted y = true

let secret z = [1, "pippo", false]

let _ = 1 + 2 * 3

let _ = 3 * 2 + 1

let _ = 1 + 2 * 3 + 4 / 5 > 6 || 7 = 7 && 8 = 7 + 1

let succ = \x. x + 1

let succ' x = x + 1

let sum = \x. \y. x + y

let sum' x y = x + y

let _ = (1 + 2) * 3

let _ = sum 1 2

let Z = \f. (\x. f (\y. x x y)) (\x. f (\y. x x y))

let m = module
  let x = 1
  let y = 2
  let f z = x + y * z

  export f
end

let _ = m.f 1

let _ = if true then 1 else 2 end
let _ = if true then 1 end

let _ = if m.f 1 = m.f 3 then print 1 end

let t = trusted module
  let f x =
    let x = declassify x in
    print x
end

let assert_public x = if !(has_attr public x) then die end

let x = [1,2,3][1]

let _ =
  let rec aux x =
    if x = 0 then
      1
    else
      aux (x - 1)
    end
  in
  let x = 10 in
  aux x

let _ =
  let rec odd x =
    if x = 1 then
      true
    else
      !(even (x - 1))
    end

  and even x =
    if x = 0 then
      true
    else
      !(odd (x - 1))
    end

  in
  odd 16

let rec odd x =
  if x = 1 then
    true
  else
    !(even (x - 1))
  end

and even x =
  if x = 0 then
    true
  else
    !(odd (x - 1))
  end


let _ =
  with { stampa x k = print x; k 42
         return x = 2 * x }
  handle
    do stampa 10

let _ =
  with { sum x y k = k (x + y) }
  handle
    do stampa 10

let p = plugin "plugin-path.scaml"
  var : any
  foo : int -> int
  bar : (int -> string) -> bool
  baz : [int, int -> string] -> []
end

let _ = []

let _ = [1,]

let _ = f ([])

